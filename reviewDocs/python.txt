1. Abstract class
    It allows you to create a set of methods that must be created within any child classes built from the abstract class. 
    A class which contains one or more abstract methods is called an abstract class. An abstract method is a method that has a declaration but does not have 
    an implementation. While we are designing large functional units we use an abstract class. When we want to provide a common interface for different 
    implementations of a component, we use an abstract class. 

    By default, Python does not provide abstract classes. Python comes with a module that provides the base for defining Abstract Base classes(ABC) 
    and that module name is ABC. ABC works by decorating methods of the base class as abstract and then registering concrete classes as implementations 
    of the abstract base. A method becomes abstract when decorated with the keyword @abstractmethod.

    Why use Abstract Base Classes : 
    By defining an abstract base class, you can define a common Application Program Interface(API) for a set of subclasses. 
    This capability is especially useful in situations where a third-party is going to provide implementations, such as with plugins, but can also help you 
    when working in a large team or with a large code-base where keeping all classes in your mind is difficult or not possible.

    Example:

    from abc import ABC, abstractmethod

    class shapes(ABC):
        @abstractmethod
        def noofsides(self):
            pass

    class square(shapes):
        def noofsides(self):
            print("Square has 4 sides")
    
    class triangle(shapes):
        def noofsides(self):
            print("Triangle has 3 sides")
    
    obj_triangle = triangle()
    obj_triangle.noofsides()

    obj_square = square()
    obj_square.noofsides()

    Output:
        Triangle has 3 sides
        Square has 4 sides

    from abc import ABC, abstractmethod
    class Animal(ABC):
        @abstractmethod
        def move(self):
            pass
 
    class Human(Animal):
        def move(self):
            print("I can walk and run")
 
    class Snake(Animal): 
        def move(self):
            print("I can crawl")
    
    # Driver code
    R = Human()
    R.move()
 
    K = Snake()
    K.move()

    Output: 

    I can walk and run
    I can crawl

2. Encapsulation
    It describes the idea of wrapping data and the methods that work on data within one unit. This puts restrictions on accessing variables and methods 
    directly and can prevent the accidental modification of data. To prevent accidental change, an object’s variable can only be changed by an object’s method. 
    Those types of variables are known as private variables.

    A class is an example of encapsulation as it encapsulates all the data that is member functions, variables, etc.

    Consider a real-life example of encapsulation, in a company, there are different sections like the accounts section, finance section, sales section etc. 
    The finance section handles all the financial transactions and keeps records of all the data related to finance. Similarly, the sales section handles all the 
    sales-related activities and keeps records of all the sales. Now there may arise a situation when for some reason an official from the finance section needs 
    all the data about sales in a particular month. In this case, he is not allowed to directly access the data of the sales section. He will first have to contact 
    some other officer in the sales section and then request him to give the particular data. This is what encapsulation is. Here the data of the sales section and 
    the employees that can manipulate them are wrapped under a single name “sales section”. Using encapsulation also hides the data. In this example, the data of the 
    sections like sales, finance, or accounts are hidden from any other section.

    Protected members
        Protected members (in C++ and JAVA) are those members of the class that cannot be accessed outside the class but can be accessed from within the class and 
        its subclasses. To accomplish this in Python, just follow the convention by prefixing the name of the member by a single underscore “_”.

        Although the protected variable can be accessed out of the class as well as in the derived class(modified too in derived class), it is customary(convention 
        not a rule) to not access the protected out the class body.

        Note: The __init__ method is a constructor and runs as soon as an object of a class is instantiated.  

        Example:

        # Creating a base class
        class Base:
            def __init__(self):
                # Protected member
                self._a = 2
 
        # Creating a derived class
        class Derived(Base):
            def __init__(self):
            # Calling constructor of Base class
                Base.__init__(self)
                print("Calling protected member of base class: ", self._a)
 
                # Modify the protected variable:
                self._a = 3
                print("Calling modified protected member outside class: ", self._a)
 
 
        obj1 = Derived()
        obj2 = Base()
 
        # Calling protected member
        # Can be accessed but should not be done due to convention
        print("Accessing protected member of obj1: ", obj1._a)
        
        # Accessing the protected variable outside
        print("Accessing protected member of obj2: ", obj2._a)

        Output: 

        Calling protected member of base class:  2
        Calling modified protected member outside class:  3
        Accessing protected member of obj1:  3
        Accessing protected member of obj2:  2

    Private members
        Private members are similar to protected members, the difference is that the class members declared private should neither be accessed outside 
        the class nor by any base class. In Python, there is no existence of Private instance variables that cannot be accessed except inside a class.

        However, to define a private member prefix the member name with double underscore “__”.

        Example:

        # Creating a Base class
        class Base:
            def __init__(self):
                self.a = "GeeksforGeeks"
                self.__c = "GeeksforGeeks"
 
        # Creating a derived class
        class Derived(Base):
            def __init__(self):
                # Calling constructor of Base class
                Base.__init__(self)
                print("Calling private member of base class: ")
                print(self.__c)
        
 
        # Driver code
        obj1 = Base()
        print(obj1.a)
        
        # Uncommenting print(obj1.c) will
        # raise an AttributeError
        
        # Uncommenting obj2 = Derived() will
        # also raise an AtrributeError as
        # private member of base class
        # is called inside derived class





Generator
Method Overloading